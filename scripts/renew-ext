#!/bin/bash
# ==============================================================================
# Script to run Renew with external classes and specific .rnw files
# Version: 3.0
# Purpose: This script configures the Java environment and launches the
#          Renew application, including user-specified external JARs and
#          automatically opening .rnw files.
#
# Key Features:
# - Automatically detects Renew home and external class directories.
# - Constructs Classpath (CP) and Module Path (MP) including Renew's internal
#   JARs and user-provided external JARs.
# - Requires Java 11 or newer due to the use of java.net.http.HttpClient.
# - Includes diagnostics for Java version and critical class presence.
# - Explicitly adds the java.net.http module for compatibility.
# ==============================================================================

# --- Configuration ---
# Define the home directory for your Renew installation.
# IMPORTANT: Update this path if your Renew installation is located elsewhere.
HOMERENEW="/Users/jpb/Dropbox/JPB-DROPBOX/Documents/ESTIG/estig_2022_2023/primavera-2022-2023/DBM-2022-2023/renew4.1base"

# Determine the directory where this script is located.
# This is used to find the parent directory, assumed to be MY_EXTERNAL_CLASSES_DIR.
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Set MY_EXTERNAL_CLASSES_DIR to the parent directory of this script's location.
# This directory should contain your custom .jar files and .rnw files.
MY_EXTERNAL_CLASSES_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Define the fully qualified name of a custom class to check for diagnostic purposes.
# This helps verify that your custom JARs are being correctly processed.
# IMPORTANT: Update this if your main custom class has a different name.
CUSTOM_CLASS_TO_CHECK="pt.ipbeja.weather.WeatherDataReader"
# Convert Java package dot notation to path slash notation for searching in JARs.
CUSTOM_CLASS_PATH_TO_CHECK=$(echo "${CUSTOM_CLASS_TO_CHECK}" | sed 's/\./\//g').class


# --- Helper Functions ---

# Function: collect_jars_from_dir
# Description: Finds all .jar files within a given directory (and its subdirectories)
#              and returns them as a colon-separated string.
# Arguments:
#   $1: search_dir - The directory to search for .jar files.
# Output:
#   Prints a colon-separated list of full paths to found .jar files.
collect_jars_from_dir() {
    local search_dir="$1"
    local collected_jars_list=""
    local jar_file_path=""
    local found_count=0

    # Check if the search directory exists.
    if [ ! -d "$search_dir" ]; then
        echo "    [DEBUG] collect_jars_from_dir: Directory '$search_dir' not found. Skipping."
        echo "" # Return an empty string if directory doesn't exist.
        return
    fi

    echo "    [DEBUG] collect_jars_from_dir: Searching for JARs in '$search_dir'..."
    # Find all files ending in .jar (-name "*.jar") that are regular files (-type f).
    # -print0 separates filenames with a null character, robustly handling spaces or special characters.
    # The 'while' loop reads these null-terminated filenames.
    # IFS= : Prevents leading/trailing whitespace trimming by 'read'.
    # -r : Prevents backslash escapes from being interpreted by 'read'.
    # -d $'\0' : Sets null as the delimiter for 'read'.
    # < <(find ...) : Process substitution, allows 'find' output to be piped to 'while'
    #                without creating a subshell that would prevent variable updates.
    while IFS= read -r -d $'\0' jar_file_path; do
        if [ -z "$collected_jars_list" ]; then # If this is the first JAR found.
            collected_jars_list="$jar_file_path"
        else # Append subsequent JARs with a colon separator.
            collected_jars_list="${collected_jars_list}:${jar_file_path}"
        fi
        found_count=$((found_count + 1))
    done < <(find "$search_dir" -name "*.jar" -type f -print0)

    echo "    [INFO] Found $found_count JAR(s) in '$search_dir'."
    echo "$collected_jars_list" # Output the final list of JARs.
}

# Function: clean_path_string
# Description: Cleans a colon-separated path string by:
#              1. Removing any leading colons.
#              2. Removing any trailing colons.
#              3. Replacing multiple consecutive colons with a single colon.
#              4. Defaulting to "." (current directory) if the path becomes empty.
# Arguments:
#   $1: path_string - The path string to clean.
# Output:
#   Prints the cleaned path string.
clean_path_string() {
    local path_to_clean="$1"
    
    # sed commands:
    # 's/^[:]*//' : Removes zero or more colons from the beginning (^) of the string.
    # 's/[:]*$//' : Removes zero or more colons from the end ($) of the string.
    # 's/[:][:]*/:/g' : Replaces one or more consecutive colons with a single colon (globally: g).
    path_to_clean=$(echo "$path_to_clean" | sed -e 's/^[:]*//' -e 's/[:]*$//' -e 's/[:][:]*/:/g')
    
    # If the path string is empty after cleaning, default to "."
    if [ -z "$path_to_clean" ]; then
        path_to_clean="."
    fi
    echo "$path_to_clean"
}

# Function: check_class_in_jars
# Description: Searches for a specific .class file entry within all .jar files
#              in a given directory.
# Arguments:
#   $1: search_dir - The directory containing .jar files to search.
#   $2: class_path - The path of the class file within the JAR (e.g., "java/lang/String.class").
#   $3: class_desc - A human-readable description of the class being searched.
# Returns:
#   0 if the class is found in at least one JAR.
#   1 if the class is not found or if the search directory doesn't exist.
check_class_in_jars() {
    local search_dir="$1"
    local class_path="$2"
    local class_desc="$3"
    local class_actually_found=0 # Flag: 0 = not found, 1 = found.

    echo "  [CHECK] Searching for '$class_desc' ($class_path) in JARs under '$search_dir'..."
    if [ ! -d "$search_dir" ]; then
        echo "    [ERROR] Directory '$search_dir' not found for class check."
        return 1 # Error condition.
    fi

    # Iterate through JAR files similar to collect_jars_from_dir.
    while IFS= read -r -d $'\0' jar_file; do
        # 'jar tf "$jar_file"' lists the contents of the JAR.
        # '2>/dev/null' suppresses errors if 'jar tf' encounters a non-JAR or corrupted file.
        # 'grep -q "^${class_path}$"' quietly searches for an exact match of the class path.
        # '^' and '$' ensure the whole line matches, preventing partial matches.
        if jar tf "$jar_file" 2>/dev/null | grep -q "^${class_path}$"; then
            echo "    [FOUND] '$class_desc' in JAR: $jar_file"
            class_actually_found=1
            # Could 'break' here if only one instance needs to be found,
            # but listing all occurrences can be useful for debugging.
        fi
    done < <(find "$search_dir" -name "*.jar" -type f -print0)

    if [ "$class_actually_found" -eq 0 ]; then
        echo "    [NOT FOUND] '$class_desc' ($class_path) was not found in any JAR under '$search_dir'."
        return 1 # Class not found.
    fi
    return 0 # Class found.
}


# --- Phase 1: Initial Sanity Checks ---
echo "[PHASE 1] Initial Sanity Checks..."
# Check if Renew's main loader JAR is present and readable.
if [ ! -r "${HOMERENEW}/de.renew.loader.jar" ]; then
  echo "  [ERROR] Renew loader.jar not found or not readable at '${HOMERENEW}/de.renew.loader.jar'!"
  echo "  Please verify your HOMERENEW variable."
  exit 1 # Exit if essential Renew component is missing.
fi
echo "  [OK] Renew loader.jar found."

# Check if the directory for external classes exists.
if [ ! -d "$MY_EXTERNAL_CLASSES_DIR" ]; then
  echo "  [ERROR] External classes directory '$MY_EXTERNAL_CLASSES_DIR' does not exist!"
  echo "  This script expects it to be the parent directory of this script."
  exit 1 # Exit if external classes directory is missing.
fi
echo "  [OK] External classes directory '$MY_EXTERNAL_CLASSES_DIR' found."
echo "  Contents of MY_EXTERNAL_CLASSES_DIR (your project files):"
ls -l "$MY_EXTERNAL_CLASSES_DIR" # List contents for user verification.
echo ""


# --- Phase 2: Classpath (CP) Construction ---
echo "[PHASE 2] Constructing Classpath (CP)..."
# The classpath tells Java where to find compiled .class files and .jar archives.

# Start with base directories: Renew home, Renew lib/libs, and external classes directory.
# These directories themselves are added so Java can find loose .class files
# (if organized in correct package subdirectories) or other resources.
CP_BASE_DIRS="${HOMERENEW}"
if [ -d "${HOMERENEW}/lib" ]; then
    CP_BASE_DIRS="${CP_BASE_DIRS}:${HOMERENEW}/lib"
fi
# Add HOMERENEW/libs only if it's a distinct directory from HOMERENEW/lib.
if [ -d "${HOMERENEW}/libs" ]; then
    is_libs_different_from_lib=true
    if [ -e "${HOMERENEW}/lib" ] && [ "$(cd "${HOMERENEW}/lib" && pwd)" = "$(cd "${HOMERENEW}/libs" && pwd)" ]; then
        is_libs_different_from_lib=false
    fi
    if $is_libs_different_from_lib; then
         CP_BASE_DIRS="${CP_BASE_DIRS}:${HOMERENEW}/libs"
    fi
fi
CP_BASE_DIRS="${CP_BASE_DIRS}:${MY_EXTERNAL_CLASSES_DIR}"

# Collect all .jar files from Renew's home directory and the external classes directory.
echo "  Collecting JARs for Classpath..."
homerenew_jars=$(collect_jars_from_dir "$HOMERENEW")
my_external_jars=$(collect_jars_from_dir "$MY_EXTERNAL_CLASSES_DIR")

# Combine base directories and all collected JAR paths.
CP="${CP_BASE_DIRS}"
if [ -n "$homerenew_jars" ]; then
    CP="${CP}:${homerenew_jars}"
fi
if [ -n "$my_external_jars" ]; then
    CP="${CP}:${my_external_jars}"
fi

# Clean the final classpath string (remove extra colons, etc.).
CP=$(clean_path_string "$CP")
echo "  [OK] Final Classpath (CP): $CP"
echo ""


# --- Phase 3: Module Path (MODULE_PATH) Construction ---
echo "[PHASE 3] Constructing Module Path (MODULE_PATH)..."
# The module path is used by Java's Platform Module System (JPMS, Java 9+).
# It specifies where to find Java modules (modular JARs or exploded module directories).

# Start with base Renew directories, as Renew itself might use modules.
MODULE_PATH_DIRS="${HOMERENEW}"
if [ -d "${HOMERENEW}/lib" ]; then
    MODULE_PATH_DIRS="${MODULE_PATH_DIRS}:${HOMERENEW}/lib"
fi
# Add HOMERENEW/libs if distinct and not already covered.
if [ -d "${HOMERENEW}/libs" ]; then
    is_libs_different_mp=true
    if [ -e "${HOMERENEW}/lib" ] && [ "$(cd "${HOMERENEW}/lib" && pwd)" = "$(cd "${HOMERENEW}/libs" && pwd)" ]; then
        is_libs_different_mp=false
    fi
    if $is_libs_different_mp && ! echo "$MODULE_PATH_DIRS" | grep -qF "${HOMERENEW}/libs"; then
         MODULE_PATH_DIRS="${MODULE_PATH_DIRS}:${HOMERENEW}/libs"
    fi
fi

# Add external classes directory to module path if it's distinct.
# Java will use it if it contains valid modules.
if [ -n "$MY_EXTERNAL_CLASSES_DIR" ] && \
   [ "$MY_EXTERNAL_CLASSES_DIR" != "$HOMERENEW" ] && \
   ! echo "$MODULE_PATH_DIRS" | grep -qF "$MY_EXTERNAL_CLASSES_DIR"; then
    MODULE_PATH_DIRS="${MODULE_PATH_DIRS}:${MY_EXTERNAL_CLASSES_DIR}"
fi

# Note: Unlike classpath, we typically add directories to the module path,
# and Java discovers modules within them. Individual JARs can also be added if they are modules.
# For simplicity, this script adds the main directories.

MODULE_PATH=$(clean_path_string "$MODULE_PATH_DIRS")
echo "  [OK] Final Module Path: $MODULE_PATH"
echo ""


# --- Phase 4: Java Command Setup ---
echo "[PHASE 4] Setting up Java Command..."
# Your WeatherDataReader class uses java.net.http.HttpClient, which requires Java 11 or newer.
# This section determines which 'java' executable to use and checks its version.

JAVACMD="java" # Default to 'java' from system PATH.
# If JAVA_HOME is set and points to a valid JDK, prefer its 'java' executable.
if [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ]; then
  JAVACMD="$JAVA_HOME/bin/java"
  echo "  [INFO] Using Java from JAVA_HOME: $JAVACMD"
else
  echo "  [INFO] Using Java from system PATH: $JAVACMD (JAVA_HOME not set or its 'bin/java' not found/executable)"
  echo "  [INFO] To use a specific Java version (11+ recommended), set the JAVA_HOME environment variable."
  echo "         Example: export JAVA_HOME=/path/to/your/jdk-17"
fi

# Print the version of the selected Java command for diagnostics.
echo "  [INFO] Checking Java version..."
# '2>&1' redirects stderr to stdout so 'grep' can process version info typically printed to stderr.
if "$JAVACMD" -version 2>&1 | grep -q "version"; then
    JAVA_VERSION_OUTPUT=$("$JAVACMD" -version 2>&1) # Capture full version output.
    echo "    ----- Java Version Output -----"
    echo "$JAVA_VERSION_OUTPUT" | sed 's/^/    /' # Indent output for readability
    echo "    -----------------------------"
    # Check if the Java version is older than 11 (e.g., 1.8, 9, 10).
    # This is a basic check; more sophisticated version parsing could be added if needed.
    if echo "$JAVA_VERSION_OUTPUT" | grep -qE "version \"(1\.[1-8]|9|10)\."; then
        echo "    [WARNING] Detected Java version older than 11. Java 11 or newer is required for java.net.http.HttpClient."
        echo "    [WARNING] Please set JAVA_HOME to a JDK 11+ installation or update your system's default Java."
    elif ! (echo "$JAVA_VERSION_OUTPUT" | grep -qE "version \"(1[1-9]|[2-9][0-9])\.") ; then
         # If not 1.8 or older, but also not clearly 11+ (e.g. "openjdk version "11...")
        echo "    [INFO] Java version appears to be 11 or newer. This should be compatible."
    fi
else
    echo "    [WARNING] Could not reliably determine Java version using '$JAVACMD -version'."
fi
echo ""


# --- Phase 5: Pre-flight Diagnostics ---
echo "[PHASE 5] Pre-flight Diagnostics..."
echo "  Configuration Summary:"
echo "    HOMERENEW (Renew Installation): $HOMERENEW"
echo "    MY_EXTERNAL_CLASSES_DIR (Your Project): $MY_EXTERNAL_CLASSES_DIR"
echo "    Renew's 'de.renew.netPath' property will be set to: $MY_EXTERNAL_CLASSES_DIR"
echo "    Script arguments received by this script: $@"
echo ""

echo "  Classpath & Module Path Verification:"
echo "    Final Classpath (CP) that will be used by Java:"
echo "      $CP"
echo "    Final Module Path (MODULE_PATH) that will be used by Java:"
echo "      $MODULE_PATH"
echo ""

echo "  Critical Class Presence Checks:"
# Check if a core Renew class can be found in Renew's JARs.
check_class_in_jars "$HOMERENEW" "de/renew/net/NetInstanceImpl.class" "Renew Core (NetInstanceImpl)"
RENEW_CORE_CLASS_FOUND=$? # $? holds the exit status of the last command. 0 = success/found.

# Check if the user-defined custom class can be found in the external JARs.
check_class_in_jars "$MY_EXTERNAL_CLASSES_DIR" "$CUSTOM_CLASS_PATH_TO_CHECK" "Custom Class ($CUSTOM_CLASS_TO_CHECK)"
CUSTOM_CLASS_FOUND=$?

# Report critical errors if essential classes are not found.
if [ $RENEW_CORE_CLASS_FOUND -ne 0 ]; then # If not 0, class was not found.
    echo "  [CRITICAL ERROR] Renew core class 'de.renew.net.NetInstanceImpl' was NOT FOUND in HOMERENEW JARs."
    echo "  This will likely cause a NoClassDefFoundError. Please check your Renew installation at $HOMERENEW."
    # Consider exiting: exit 1
fi
if [ $CUSTOM_CLASS_FOUND -ne 0 ]; then # If not 0, class was not found.
    echo "  [CRITICAL WARNING] Your custom class '$CUSTOM_CLASS_TO_CHECK' was NOT FOUND in any JAR under '$MY_EXTERNAL_CLASSES_DIR'."
    echo "  This will likely cause a 'No such class' or 'ClassNotFoundException' error from Renew."
    echo "  Verify your JAR is correctly built, contains the class with the correct package structure, and is placed in '$MY_EXTERNAL_CLASSES_DIR'."
fi
echo ""


# --- Phase 6: Renew Execution ---
echo "[PHASE 6] Preparing to Launch Renew..."

# Check if any .rnw (Renew net) files exist in MY_EXTERNAL_CLASSES_DIR to be opened automatically.
_found_rnw_files_in_parent_dir=0
# 'find ... -print -quit' stops after the first match.
# 'grep -q .' quietly checks if 'find' produced any output (i.e., found a file).
if find "$MY_EXTERNAL_CLASSES_DIR" -maxdepth 1 -name '*.rnw' -print -quit 2>/dev/null | grep -q . ; then
    _found_rnw_files_in_parent_dir=1
    echo "  [INFO] Found .rnw files in '$MY_EXTERNAL_CLASSES_DIR'. They will be passed to Renew."
else
    echo "  [INFO] No .rnw files found directly in '$MY_EXTERNAL_CLASSES_DIR'. Renew will start without opening specific files from there initially (unless passed as arguments to this script)."
fi

# Base Java command arguments for launching Renew.
# --add-modules java.net.http : Explicitly makes the java.net.http module (for HttpClient) available.
#                                This is crucial for Java 11+ if the module isn't resolved by default.
# -Xmx512M : Sets maximum Java heap size to 512 MB. Adjust as needed.
# -Dde.renew.netPath : System property for Renew to find its nets/resources.
# -classpath / -cp : Specifies the classpath.
# -p / --module-path : Specifies the module path.
# -m : Specifies the main module and main class to execute (Renew's PluginManager).
# gui : Argument to Renew's PluginManager to start the graphical user interface.
JAVA_CMD_BASE_ARGS="--add-modules java.net.http \
         -Xmx512M \
         -Dde.renew.netPath=\"$MY_EXTERNAL_CLASSES_DIR\" \
         -classpath \"$CP\" \
         -p \"$MODULE_PATH\" \
         -m \"de.renew.loader/de.renew.plugin.PluginManager\" \
         gui"

# Prepare arguments for .rnw files if they were found.
RNW_FILES_ARG_STRING=""
if [ "$_found_rnw_files_in_parent_dir" -eq 1 ]; then
    # This glob pattern will be expanded by 'eval' later.
    # It needs to be quoted carefully for 'eval'.
    RNW_FILES_ARG_STRING="\"\$MY_EXTERNAL_CLASSES_DIR\"/*.rnw"
fi

echo "  [EXEC] Launching Renew. Command structure (placeholders for long paths):"
# Print a template of the command for clarity, as the actual paths can be very long.
echo "    $JAVACMD [JVM_OPTIONS_INCLUDING_ADD_MODULES] -Dde.renew.netPath=\"...\" -classpath [CP] -p [MP] -m de.renew.loader/... gui [RNW_FILES] [SCRIPT_ARGS]"
echo "    (Actual Classpath and Module Path are printed in Phase 5. Please verify them if issues persist.)"

# Execute Renew using 'eval'.
# WARNING: 'eval' can be a security risk if variables contain untrusted input with shell metacharacters.
# It's used here to allow the shell to correctly expand the RNW_FILES_ARG_STRING (which includes a glob *)
# and "$@" (all arguments passed to this script) into separate arguments for the Java command.
# Given this script is for local development and run by the user, the risk is generally considered low.
if [ "$_found_rnw_files_in_parent_dir" -eq 1 ]; then
    eval "$JAVACMD $JAVA_CMD_BASE_ARGS $RNW_FILES_ARG_STRING \"\$@\""
else
    eval "$JAVACMD $JAVA_CMD_BASE_ARGS \"\$@\""
fi

echo ""
echo "[PHASE 7] Renew execution finished."
exit 0 # Exit with success status.
